1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "tududi.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "tududi.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "tududi.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "tududi.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Login to Tududi with the credentials you configured:
   Email: {{ .Values.tududi.user.email }}
   Password: [The password you set in values.yaml]

3. Configuration Notes:
   - Database and uploads are persisted using PVC: {{ include "tududi.pvcName" . }}
   {{- if .Values.tududi.telegram.enabled }}
   - Telegram integration is ENABLED with bot token configured
   {{- else }}
   - Telegram integration is DISABLED (can be enabled in values.yaml)
   {{- end }}
   {{- if not .Values.tududi.scheduler.enabled }}
   - Scheduler is DISABLED (can be enabled in values.yaml)
   {{- end }}

4. Security Recommendations:
   - Change the default admin password in values.yaml
   - Generate a secure session secret: openssl rand -hex 64
   - Configure proper CORS origins for your domain

5. For Telegram Integration (if enabled):
   - Create a bot with @BotFather on Telegram
   - Configure the bot token in tududi settings via the web interface
   - Start chatting with your bot to create tasks directly from Telegram
